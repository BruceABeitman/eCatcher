#                    sum(est_matrix$mws[(1+wifi_rate_sample*interval):length(est_matrix$mws)])/
#                    sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$mws)])
#
#  est_matrix_wifi$display[(1+wifi_rate_sample*interval):length(est_matrix$display)] <-
#                    sum(est_matrix$display[(1+wifi_rate_sample*interval):length(est_matrix$display)])/
#                    sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$display)])
#}
est_matrix_wifi$wifi <- est_matrix_wifi$wifi*est_matrix_wifi$time_base
est_matrix_wifi$cpu <- est_matrix_wifi$cpu*est_matrix_wifi$time_base
est_matrix_wifi$cpu_base <- est_matrix_wifi$cpu_base*est_matrix_wifi$time_base
est_matrix_wifi$cpu_freq <- est_matrix_wifi$cpu_freq*est_matrix_wifi$time_base
est_matrix_wifi$mws <- est_matrix_wifi$mws*est_matrix_wifi$time_base
est_matrix_wifi$display <- est_matrix_wifi$display*est_matrix_wifi$time_base
} else {
est_matrix_wifi$wifi <- (sum(est_matrix$wifi)/sum(est_matrix$time_base))*est_matrix$time_base
est_matrix_wifi$cpu <- (sum(est_matrix$cpu)/sum(est_matrix$time_base))*est_matrix$time_base
est_matrix_wifi$mws <- (sum(est_matrix$mws)/sum(est_matrix$time_base))*est_matrix$time_base
est_matrix_wifi$display <- (sum(est_matrix$display)/sum(est_matrix$time_base))*est_matrix$time_base
}
save(energy_measured, est_matrix_raw, est_matrix, est_matrix_wifi,
file=paste(loc, fin, interval, "ss_MAVwifi.Rdata", sep=""))
rm(list=ls())
#source("lib_plot.R")
home_dir <- "/home/beitman/Projects/MobEBug/OrigMobEBug/project_code/power_model/power_model_data/"
fin <- scan(what=character(0), nmax=1)
loc <- "matrix/"
load(paste(loc, fin, ".Rdata", sep=""))
# fin will be replaced with the value stored in the Rdata
# re-calculate wifi transmission rate (bytes per ms), and also average all other components
# est_matrix_wifi will be used instead of est_matrix for power model building
est_matrix_wifi <- data.frame(time=est_matrix$time, time_base=est_matrix$time_base,
wifi_base=est_matrix$wifi_base, display=est_matrix$display)
interval <- 20 # 10 seconds
#interval_list <- c(5,10,15,20,100,200)
#interval_list <- c(400,500,1000)
interval_list <- c(10)
## Moving Average
mavg <- function(x,s=5){
n <- ceiling(length(x)/s)
#x <- sortedm$ranking
#MAranking <- mav(ranking, length(ranking)/5)
res <- c()
## Handles first n/2 elements
for (iter in 1:(ceiling(n/2))) {
end <- ((ceiling(n/2)) + iter)
start <- 1
tmp_mean <- mean(x[start:end])
res <- c(res, tmp_mean)
}
tmp <- c(res, x[(ceiling(n/2)):(length(x))])
tx = data.frame(x)
tdfa = data.frame(tmp)
for (iter in (ceiling(n/2)+1):(length(x) - (ceiling(n/2)))) {
end <- ((ceiling(n/2)) + iter)
start <- (iter - (ceiling(n/2)))
tmp_mean <- mean(x[start:end])
res <- c(res, tmp_mean)
}
## Handles all middle elements
#res <- c(res, filter(tmp,rep(1/n,n),sides=2)[(ceiling(n/2)):(length(tmp))])
#res <- c(res, mid_res)
tdf = data.frame(res)
## Handles last n/2 elements
end_res <- c()
for (iter in (length(x) - (ceiling(n/2))):(length(x))) {
end <- length(x)
start <- (iter - (ceiling(n/2)))
tmp_mean <- mean(x[start:end])
end_res <- c(end_res, tmp_mean)
}
tdfe = data.frame(end_res)
res <- c(res[1:(length(x) - (ceiling(n/2)))], end_res[1:(length(end_res)-1)])
tdfet = data.frame(res)
return (res)
}
#for (iter in seq(interval_list)){
# re-calculate wifi transmission rate (bytes per ms), and also average all other components
# est_matrix_wifi will be used instead of est_matrix for power model building
est_matrix_wifi <- data.frame(time=est_matrix$time, time_base=est_matrix$time_base,
wifi_base=est_matrix$wifi_base, display=est_matrix$display)
est_matrix_wifit <- data.frame(time=est_matrix$time, time_base=est_matrix$time_base,
wifi_base=est_matrix$wifi_base, display=est_matrix$display)
#interval = interval_list[iter]
#cat(" interval=", interval, sep="")
wifi_rate_sample <- length(est_matrix$wifi)%/%interval
if(wifi_rate_sample >= 1) {
wifi_rate <- apply(array(1:wifi_rate_sample), 1,
function(x)
sum(est_matrix$wifi[(1+interval*(x-1)):(interval*x)])/
sum(est_matrix$time_base[(1+interval*(x-1)):(interval*x)]))
cpu_rate <- apply(array(1:wifi_rate_sample), 1,
function(x)
sum(est_matrix$cpu[(1+interval*(x-1)):(interval*x)])/
sum(est_matrix$time_base[(1+interval*(x-1)):(interval*x)]))
cpu_base_rate <- apply(array(1:wifi_rate_sample), 1,
function(x)
sum(est_matrix$cpu_base[(1+interval*(x-1)):(interval*x)])/
sum(est_matrix$time_base[(1+interval*(x-1)):(interval*x)]))
cpu_freq_rate <- apply(array(1:wifi_rate_sample), 1,
function(x)
sum(est_matrix$cpu_freq[(1+interval*(x-1)):(interval*x)])/
sum(est_matrix$time_base[(1+interval*(x-1)):(interval*x)]))
mws_rate <- apply(array(1:wifi_rate_sample), 1,
function(x)
sum(est_matrix$mws[(1+interval*(x-1)):(interval*x)])/
sum(est_matrix$time_base[(1+interval*(x-1)):(interval*x)]))
display_rate <- apply(array(1:wifi_rate_sample), 1,
function(x)
sum(est_matrix$display[(1+interval*(x-1)):(interval*x)])/
sum(est_matrix$time_base[(1+interval*(x-1)):(interval*x)]))
est_matrix_wifi$wifi <- 0
est_matrix_wifi$cpu <- 0
est_matrix_wifi$cpu_base <- 0
est_matrix_wifi$cpu_freq <- 0
est_matrix_wifi$mws <- 0
est_matrix_wifi$display <- 0
# Moving average approach
est_matrix_wifi$wifi <- mavg(est_matrix$wifi, interval)
est_matrix_wifi$wifi <- ((est_matrix_wifi$wifi)/(mavg(est_matrix$time_base)))
est_matrix_wifi$cpu <- mavg(est_matrix$cpu, interval)
est_matrix_wifi$cpu <- ((est_matrix_wifi$cpu)/(mavg(est_matrix$time_base)))
est_matrix_wifi$cpu_base <- mavg(est_matrix$cpu_base, interval)
est_matrix_wifi$cpu_base <- ((est_matrix_wifi$cpu_base)/(mavg(est_matrix$time_base)))
est_matrix_wifi$cpu_freq <- mavg(est_matrix$cpu_freq, interval)
est_matrix_wifi$cpu_freq <- ((est_matrix_wifi$cpu_base)/(mavg(est_matrix$time_base)))
est_matrix_wifi$mws <- mavg(est_matrix$mws, interval)
est_matrix_wifi$mws <- ((est_matrix_wifi$mws)/(mavg(est_matrix$time_base)))
est_matrix_wifi$display <- mavg(est_matrix$display, interval)
est_matrix_wifi$display <- ((est_matrix_wifi$display)/(mavg(est_matrix$time_base)))
# Jau-Yuan's non-moving average approach
#for(x in 1:wifi_rate_sample) {
#  #x=10
#  #cat(" x=", x, sep="")
#  est_matrix_wifi$wifi[(1+interval*(x-1)):(interval*x)] <- wifi_rate[x]
#  est_matrix_wifi$cpu[(1+interval*(x-1)):(interval*x)] <- cpu_rate[x]
#
#  est_matrix_wifi$cpu_base[(1+interval*(x-1)):(interval*x)] <- cpu_base_rate[x]
#  est_matrix_wifi$cpu_freq[(1+interval*(x-1)):(interval*x)] <- cpu_freq_rate[x]
#
#  est_matrix_wifi$mws[(1+interval*(x-1)):(interval*x)] <- mws_rate[x]
#  est_matrix_wifi$display[(1+interval*(x-1)):(interval*x)] <- display_rate[x]
#}
# Do not need to discard if using moving average approach
#if(length(est_matrix$wifi)%%interval<16) {
#  # discard the last few data because of the short length
#  est_matrix_wifi <- est_matrix_wifi[1:(wifi_rate_sample*interval),]
#} else {
#  est_matrix_wifi$wifi[(1+wifi_rate_sample*interval):length(est_matrix$wifi)] <-
#                    sum(est_matrix$wifi[(1+wifi_rate_sample*interval):length(est_matrix$wifi)])/
#                    sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$wifi)])
#
#  est_matrix_wifi$cpu[(1+wifi_rate_sample*interval):length(est_matrix$cpu)] <-
#                    sum(est_matrix$cpu[(1+wifi_rate_sample*interval):length(est_matrix$cpu)])/
#                   sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$cpu)])
#
#  #est_matrix_wifi$cpu_base[(1+wifi_rate_sample*interval):length(est_matrix$cpu_base)] <-
#  #                  sum(est_matrix$cpu_base[(1+wifi_rate_sample*interval):length(est_matrix$cpu_base)])/
#  #                  sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$cpu_base)])
#
#  #est_matrix_wifi$cpu_freq[(1+wifi_rate_sample*interval):length(est_matrix$cpu_freq)] <-
#  #                  sum(est_matrix$cpu_freq[(1+wifi_rate_sample*interval):length(est_matrix$cpu_freq)])/
#  #                  sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$cpu_freq)])
#
#  est_matrix_wifi$mws[(1+wifi_rate_sample*interval):length(est_matrix$mws)] <-
#                    sum(est_matrix$mws[(1+wifi_rate_sample*interval):length(est_matrix$mws)])/
#                    sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$mws)])
#
#  est_matrix_wifi$display[(1+wifi_rate_sample*interval):length(est_matrix$display)] <-
#                    sum(est_matrix$display[(1+wifi_rate_sample*interval):length(est_matrix$display)])/
#                    sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$display)])
#}
est_matrix_wifi$wifi <- est_matrix_wifi$wifi*est_matrix_wifi$time_base
est_matrix_wifi$cpu <- est_matrix_wifi$cpu*est_matrix_wifi$time_base
est_matrix_wifi$cpu_base <- est_matrix_wifi$cpu_base*est_matrix_wifi$time_base
est_matrix_wifi$cpu_freq <- est_matrix_wifi$cpu_freq*est_matrix_wifi$time_base
est_matrix_wifi$mws <- est_matrix_wifi$mws*est_matrix_wifi$time_base
est_matrix_wifi$display <- est_matrix_wifi$display*est_matrix_wifi$time_base
} else {
est_matrix_wifi$wifi <- (sum(est_matrix$wifi)/sum(est_matrix$time_base))*est_matrix$time_base
est_matrix_wifi$cpu <- (sum(est_matrix$cpu)/sum(est_matrix$time_base))*est_matrix$time_base
est_matrix_wifi$mws <- (sum(est_matrix$mws)/sum(est_matrix$time_base))*est_matrix$time_base
est_matrix_wifi$display <- (sum(est_matrix$display)/sum(est_matrix$time_base))*est_matrix$time_base
}
save(energy_measured, est_matrix_raw, est_matrix, est_matrix_wifi,
file=paste(loc, fin, interval, "ss_MAVwifi.Rdata", sep=""))
rm(list=ls())
#source("lib_plot.R")
home_dir <- "/home/beitman/Projects/MobEBug/OrigMobEBug/project_code/power_model/power_model_data/"
fin <- scan(what=character(0), nmax=1)
loc <- "matrix/"
load(paste(loc, fin, ".Rdata", sep=""))
# re-calculate wifi transmission rate (bytes per ms), and also average all other components
# est_matrix_wifi will be used instead of est_matrix for power model building
est_matrix_wifi <- data.frame(time=est_matrix$time, time_base=est_matrix$time_base,
wifi_base=est_matrix$wifi_base, display=est_matrix$display)
interval <- 20 # 10 seconds
#interval_list <- c(5,10,15,20,100,200)
#interval_list <- c(400,500,1000)
interval_list <- c(10)
## Moving Average
mavg <- function(x,s=5){
n <- ceiling(length(x)/s)
#x <- sortedm$ranking
#MAranking <- mav(ranking, length(ranking)/5)
res <- c()
## Handles first n/2 elements
for (iter in 1:(ceiling(n/2))) {
end <- ((ceiling(n/2)) + iter)
start <- 1
tmp_mean <- mean(x[start:end])
res <- c(res, tmp_mean)
}
tmp <- c(res, x[(ceiling(n/2)):(length(x))])
tx = data.frame(x)
tdfa = data.frame(tmp)
for (iter in (ceiling(n/2)+1):(length(x) - (ceiling(n/2)))) {
end <- ((ceiling(n/2)) + iter)
start <- (iter - (ceiling(n/2)))
tmp_mean <- mean(x[start:end])
res <- c(res, tmp_mean)
}
## Handles all middle elements
#res <- c(res, filter(tmp,rep(1/n,n),sides=2)[(ceiling(n/2)):(length(tmp))])
#res <- c(res, mid_res)
tdf = data.frame(res)
## Handles last n/2 elements
end_res <- c()
for (iter in (length(x) - (ceiling(n/2))):(length(x))) {
end <- length(x)
start <- (iter - (ceiling(n/2)))
tmp_mean <- mean(x[start:end])
end_res <- c(end_res, tmp_mean)
}
tdfe = data.frame(end_res)
res <- c(res[1:(length(x) - (ceiling(n/2)))], end_res[1:(length(end_res)-1)])
tdfet = data.frame(res)
return (res)
}
#for (iter in seq(interval_list)){
# re-calculate wifi transmission rate (bytes per ms), and also average all other components
# est_matrix_wifi will be used instead of est_matrix for power model building
est_matrix_wifi <- data.frame(time=est_matrix$time, time_base=est_matrix$time_base,
wifi_base=est_matrix$wifi_base, display=est_matrix$display)
est_matrix_wifit <- data.frame(time=est_matrix$time, time_base=est_matrix$time_base,
wifi_base=est_matrix$wifi_base, display=est_matrix$display)
#interval = interval_list[iter]
#cat(" interval=", interval, sep="")
wifi_rate_sample <- length(est_matrix$wifi)%/%interval
if(wifi_rate_sample >= 1) {
wifi_rate <- apply(array(1:wifi_rate_sample), 1,
function(x)
sum(est_matrix$wifi[(1+interval*(x-1)):(interval*x)])/
sum(est_matrix$time_base[(1+interval*(x-1)):(interval*x)]))
cpu_rate <- apply(array(1:wifi_rate_sample), 1,
function(x)
sum(est_matrix$cpu[(1+interval*(x-1)):(interval*x)])/
sum(est_matrix$time_base[(1+interval*(x-1)):(interval*x)]))
cpu_base_rate <- apply(array(1:wifi_rate_sample), 1,
function(x)
sum(est_matrix$cpu_base[(1+interval*(x-1)):(interval*x)])/
sum(est_matrix$time_base[(1+interval*(x-1)):(interval*x)]))
cpu_freq_rate <- apply(array(1:wifi_rate_sample), 1,
function(x)
sum(est_matrix$cpu_freq[(1+interval*(x-1)):(interval*x)])/
sum(est_matrix$time_base[(1+interval*(x-1)):(interval*x)]))
mws_rate <- apply(array(1:wifi_rate_sample), 1,
function(x)
sum(est_matrix$mws[(1+interval*(x-1)):(interval*x)])/
sum(est_matrix$time_base[(1+interval*(x-1)):(interval*x)]))
display_rate <- apply(array(1:wifi_rate_sample), 1,
function(x)
sum(est_matrix$display[(1+interval*(x-1)):(interval*x)])/
sum(est_matrix$time_base[(1+interval*(x-1)):(interval*x)]))
est_matrix_wifi$wifi <- 0
est_matrix_wifi$cpu <- 0
est_matrix_wifi$cpu_base <- 0
est_matrix_wifi$cpu_freq <- 0
est_matrix_wifi$mws <- 0
est_matrix_wifi$display <- 0
# Moving average approach
est_matrix_wifi$wifi <- mavg(est_matrix$wifi, interval)
est_matrix_wifi$wifi <- ((est_matrix_wifi$wifi)/(mavg(est_matrix$time_base)))
est_matrix_wifi$cpu <- mavg(est_matrix$cpu, interval)
est_matrix_wifi$cpu <- ((est_matrix_wifi$cpu)/(mavg(est_matrix$time_base)))
est_matrix_wifi$cpu_base <- mavg(est_matrix$cpu_base, interval)
est_matrix_wifi$cpu_base <- ((est_matrix_wifi$cpu_base)/(mavg(est_matrix$time_base)))
est_matrix_wifi$cpu_freq <- mavg(est_matrix$cpu_freq, interval)
est_matrix_wifi$cpu_freq <- ((est_matrix_wifi$cpu_base)/(mavg(est_matrix$time_base)))
est_matrix_wifi$mws <- mavg(est_matrix$mws, interval)
est_matrix_wifi$mws <- ((est_matrix_wifi$mws)/(mavg(est_matrix$time_base)))
est_matrix_wifi$display <- mavg(est_matrix$display, interval)
est_matrix_wifi$display <- ((est_matrix_wifi$display)/(mavg(est_matrix$time_base)))
# Jau-Yuan's non-moving average approach
#for(x in 1:wifi_rate_sample) {
#  #x=10
#  #cat(" x=", x, sep="")
#  est_matrix_wifi$wifi[(1+interval*(x-1)):(interval*x)] <- wifi_rate[x]
#  est_matrix_wifi$cpu[(1+interval*(x-1)):(interval*x)] <- cpu_rate[x]
#
#  est_matrix_wifi$cpu_base[(1+interval*(x-1)):(interval*x)] <- cpu_base_rate[x]
#  est_matrix_wifi$cpu_freq[(1+interval*(x-1)):(interval*x)] <- cpu_freq_rate[x]
#
#  est_matrix_wifi$mws[(1+interval*(x-1)):(interval*x)] <- mws_rate[x]
#  est_matrix_wifi$display[(1+interval*(x-1)):(interval*x)] <- display_rate[x]
#}
# Do not need to discard if using moving average approach
#if(length(est_matrix$wifi)%%interval<16) {
#  # discard the last few data because of the short length
#  est_matrix_wifi <- est_matrix_wifi[1:(wifi_rate_sample*interval),]
#} else {
#  est_matrix_wifi$wifi[(1+wifi_rate_sample*interval):length(est_matrix$wifi)] <-
#                    sum(est_matrix$wifi[(1+wifi_rate_sample*interval):length(est_matrix$wifi)])/
#                    sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$wifi)])
#
#  est_matrix_wifi$cpu[(1+wifi_rate_sample*interval):length(est_matrix$cpu)] <-
#                    sum(est_matrix$cpu[(1+wifi_rate_sample*interval):length(est_matrix$cpu)])/
#                   sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$cpu)])
#
#  #est_matrix_wifi$cpu_base[(1+wifi_rate_sample*interval):length(est_matrix$cpu_base)] <-
#  #                  sum(est_matrix$cpu_base[(1+wifi_rate_sample*interval):length(est_matrix$cpu_base)])/
#  #                  sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$cpu_base)])
#
#  #est_matrix_wifi$cpu_freq[(1+wifi_rate_sample*interval):length(est_matrix$cpu_freq)] <-
#  #                  sum(est_matrix$cpu_freq[(1+wifi_rate_sample*interval):length(est_matrix$cpu_freq)])/
#  #                  sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$cpu_freq)])
#
#  est_matrix_wifi$mws[(1+wifi_rate_sample*interval):length(est_matrix$mws)] <-
#                    sum(est_matrix$mws[(1+wifi_rate_sample*interval):length(est_matrix$mws)])/
#                    sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$mws)])
#
#  est_matrix_wifi$display[(1+wifi_rate_sample*interval):length(est_matrix$display)] <-
#                    sum(est_matrix$display[(1+wifi_rate_sample*interval):length(est_matrix$display)])/
#                    sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$display)])
#}
est_matrix_wifi$wifi <- est_matrix_wifi$wifi*est_matrix_wifi$time_base
est_matrix_wifi$cpu <- est_matrix_wifi$cpu*est_matrix_wifi$time_base
est_matrix_wifi$cpu_base <- est_matrix_wifi$cpu_base*est_matrix_wifi$time_base
est_matrix_wifi$cpu_freq <- est_matrix_wifi$cpu_freq*est_matrix_wifi$time_base
est_matrix_wifi$mws <- est_matrix_wifi$mws*est_matrix_wifi$time_base
est_matrix_wifi$display <- est_matrix_wifi$display*est_matrix_wifi$time_base
} else {
est_matrix_wifi$wifi <- (sum(est_matrix$wifi)/sum(est_matrix$time_base))*est_matrix$time_base
est_matrix_wifi$cpu <- (sum(est_matrix$cpu)/sum(est_matrix$time_base))*est_matrix$time_base
est_matrix_wifi$mws <- (sum(est_matrix$mws)/sum(est_matrix$time_base))*est_matrix$time_base
est_matrix_wifi$display <- (sum(est_matrix$display)/sum(est_matrix$time_base))*est_matrix$time_base
}
save(energy_measured, est_matrix_raw, est_matrix, est_matrix_wifi,
file=paste(loc, fin, interval, "ss_MAVwifi.Rdata", sep=""))
rm(list=ls())
#source("lib_plot.R")
home_dir <- "/home/beitman/Projects/MobEBug/OrigMobEBug/project_code/power_model/power_model_data/"
fin <- scan(what=character(0), nmax=1)
loc <- "matrix/"
load(paste(loc, fin, ".Rdata", sep=""))
# fin will be replaced with the value stored in the Rdata
# re-calculate wifi transmission rate (bytes per ms), and also average all other components
# est_matrix_wifi will be used instead of est_matrix for power model building
est_matrix_wifi <- data.frame(time=est_matrix$time, time_base=est_matrix$time_base,
wifi_base=est_matrix$wifi_base, display=est_matrix$display)
interval <- 20 # 10 seconds
#interval_list <- c(5,10,15,20,100,200)
#interval_list <- c(400,500,1000)
interval_list <- c(10)
## Moving Average
mavg <- function(x,s=5){
n <- ceiling(length(x)/s)
#x <- sortedm$ranking
#MAranking <- mav(ranking, length(ranking)/5)
res <- c()
## Handles first n/2 elements
for (iter in 1:(ceiling(n/2))) {
end <- ((ceiling(n/2)) + iter)
start <- 1
tmp_mean <- mean(x[start:end])
res <- c(res, tmp_mean)
}
tmp <- c(res, x[(ceiling(n/2)):(length(x))])
tx = data.frame(x)
tdfa = data.frame(tmp)
for (iter in (ceiling(n/2)+1):(length(x) - (ceiling(n/2)))) {
end <- ((ceiling(n/2)) + iter)
start <- (iter - (ceiling(n/2)))
tmp_mean <- mean(x[start:end])
res <- c(res, tmp_mean)
}
## Handles all middle elements
#res <- c(res, filter(tmp,rep(1/n,n),sides=2)[(ceiling(n/2)):(length(tmp))])
#res <- c(res, mid_res)
tdf = data.frame(res)
## Handles last n/2 elements
end_res <- c()
for (iter in (length(x) - (ceiling(n/2))):(length(x))) {
end <- length(x)
start <- (iter - (ceiling(n/2)))
tmp_mean <- mean(x[start:end])
end_res <- c(end_res, tmp_mean)
}
tdfe = data.frame(end_res)
res <- c(res[1:(length(x) - (ceiling(n/2)))], end_res[1:(length(end_res)-1)])
tdfet = data.frame(res)
return (res)
}
#for (iter in seq(interval_list)){
# re-calculate wifi transmission rate (bytes per ms), and also average all other components
# est_matrix_wifi will be used instead of est_matrix for power model building
est_matrix_wifi <- data.frame(time=est_matrix$time, time_base=est_matrix$time_base,
wifi_base=est_matrix$wifi_base, display=est_matrix$display)
est_matrix_wifit <- data.frame(time=est_matrix$time, time_base=est_matrix$time_base,
wifi_base=est_matrix$wifi_base, display=est_matrix$display)
#interval = interval_list[iter]
#cat(" interval=", interval, sep="")
wifi_rate_sample <- length(est_matrix$wifi)%/%interval
if(wifi_rate_sample >= 1) {
wifi_rate <- apply(array(1:wifi_rate_sample), 1,
function(x)
sum(est_matrix$wifi[(1+interval*(x-1)):(interval*x)])/
sum(est_matrix$time_base[(1+interval*(x-1)):(interval*x)]))
cpu_rate <- apply(array(1:wifi_rate_sample), 1,
function(x)
sum(est_matrix$cpu[(1+interval*(x-1)):(interval*x)])/
sum(est_matrix$time_base[(1+interval*(x-1)):(interval*x)]))
cpu_base_rate <- apply(array(1:wifi_rate_sample), 1,
function(x)
sum(est_matrix$cpu_base[(1+interval*(x-1)):(interval*x)])/
sum(est_matrix$time_base[(1+interval*(x-1)):(interval*x)]))
cpu_freq_rate <- apply(array(1:wifi_rate_sample), 1,
function(x)
sum(est_matrix$cpu_freq[(1+interval*(x-1)):(interval*x)])/
sum(est_matrix$time_base[(1+interval*(x-1)):(interval*x)]))
mws_rate <- apply(array(1:wifi_rate_sample), 1,
function(x)
sum(est_matrix$mws[(1+interval*(x-1)):(interval*x)])/
sum(est_matrix$time_base[(1+interval*(x-1)):(interval*x)]))
display_rate <- apply(array(1:wifi_rate_sample), 1,
function(x)
sum(est_matrix$display[(1+interval*(x-1)):(interval*x)])/
sum(est_matrix$time_base[(1+interval*(x-1)):(interval*x)]))
est_matrix_wifi$wifi <- 0
est_matrix_wifi$cpu <- 0
est_matrix_wifi$cpu_base <- 0
est_matrix_wifi$cpu_freq <- 0
est_matrix_wifi$mws <- 0
est_matrix_wifi$display <- 0
# Moving average approach
est_matrix_wifi$wifi <- mavg(est_matrix$wifi, interval)
est_matrix_wifi$wifi <- ((est_matrix_wifi$wifi)/(mavg(est_matrix$time_base)))
est_matrix_wifi$cpu <- mavg(est_matrix$cpu, interval)
est_matrix_wifi$cpu <- ((est_matrix_wifi$cpu)/(mavg(est_matrix$time_base)))
est_matrix_wifi$cpu_base <- mavg(est_matrix$cpu_base, interval)
est_matrix_wifi$cpu_base <- ((est_matrix_wifi$cpu_base)/(mavg(est_matrix$time_base)))
est_matrix_wifi$cpu_freq <- mavg(est_matrix$cpu_freq, interval)
est_matrix_wifi$cpu_freq <- ((est_matrix_wifi$cpu_base)/(mavg(est_matrix$time_base)))
est_matrix_wifi$mws <- mavg(est_matrix$mws, interval)
est_matrix_wifi$mws <- ((est_matrix_wifi$mws)/(mavg(est_matrix$time_base)))
est_matrix_wifi$display <- mavg(est_matrix$display, interval)
est_matrix_wifi$display <- ((est_matrix_wifi$display)/(mavg(est_matrix$time_base)))
# Jau-Yuan's non-moving average approach
#for(x in 1:wifi_rate_sample) {
#  #x=10
#  #cat(" x=", x, sep="")
#  est_matrix_wifi$wifi[(1+interval*(x-1)):(interval*x)] <- wifi_rate[x]
#  est_matrix_wifi$cpu[(1+interval*(x-1)):(interval*x)] <- cpu_rate[x]
#
#  est_matrix_wifi$cpu_base[(1+interval*(x-1)):(interval*x)] <- cpu_base_rate[x]
#  est_matrix_wifi$cpu_freq[(1+interval*(x-1)):(interval*x)] <- cpu_freq_rate[x]
#
#  est_matrix_wifi$mws[(1+interval*(x-1)):(interval*x)] <- mws_rate[x]
#  est_matrix_wifi$display[(1+interval*(x-1)):(interval*x)] <- display_rate[x]
#}
# Do not need to discard if using moving average approach
#if(length(est_matrix$wifi)%%interval<16) {
#  # discard the last few data because of the short length
#  est_matrix_wifi <- est_matrix_wifi[1:(wifi_rate_sample*interval),]
#} else {
#  est_matrix_wifi$wifi[(1+wifi_rate_sample*interval):length(est_matrix$wifi)] <-
#                    sum(est_matrix$wifi[(1+wifi_rate_sample*interval):length(est_matrix$wifi)])/
#                    sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$wifi)])
#
#  est_matrix_wifi$cpu[(1+wifi_rate_sample*interval):length(est_matrix$cpu)] <-
#                    sum(est_matrix$cpu[(1+wifi_rate_sample*interval):length(est_matrix$cpu)])/
#                   sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$cpu)])
#
#  #est_matrix_wifi$cpu_base[(1+wifi_rate_sample*interval):length(est_matrix$cpu_base)] <-
#  #                  sum(est_matrix$cpu_base[(1+wifi_rate_sample*interval):length(est_matrix$cpu_base)])/
#  #                  sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$cpu_base)])
#
#  #est_matrix_wifi$cpu_freq[(1+wifi_rate_sample*interval):length(est_matrix$cpu_freq)] <-
#  #                  sum(est_matrix$cpu_freq[(1+wifi_rate_sample*interval):length(est_matrix$cpu_freq)])/
#  #                  sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$cpu_freq)])
#
#  est_matrix_wifi$mws[(1+wifi_rate_sample*interval):length(est_matrix$mws)] <-
#                    sum(est_matrix$mws[(1+wifi_rate_sample*interval):length(est_matrix$mws)])/
#                    sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$mws)])
#
#  est_matrix_wifi$display[(1+wifi_rate_sample*interval):length(est_matrix$display)] <-
#                    sum(est_matrix$display[(1+wifi_rate_sample*interval):length(est_matrix$display)])/
#                    sum(est_matrix$time_base[(1+wifi_rate_sample*interval):length(est_matrix$display)])
#}
est_matrix_wifi$wifi <- est_matrix_wifi$wifi*est_matrix_wifi$time_base
est_matrix_wifi$cpu <- est_matrix_wifi$cpu*est_matrix_wifi$time_base
est_matrix_wifi$cpu_base <- est_matrix_wifi$cpu_base*est_matrix_wifi$time_base
est_matrix_wifi$cpu_freq <- est_matrix_wifi$cpu_freq*est_matrix_wifi$time_base
est_matrix_wifi$mws <- est_matrix_wifi$mws*est_matrix_wifi$time_base
est_matrix_wifi$display <- est_matrix_wifi$display*est_matrix_wifi$time_base
} else {
est_matrix_wifi$wifi <- (sum(est_matrix$wifi)/sum(est_matrix$time_base))*est_matrix$time_base
est_matrix_wifi$cpu <- (sum(est_matrix$cpu)/sum(est_matrix$time_base))*est_matrix$time_base
est_matrix_wifi$mws <- (sum(est_matrix$mws)/sum(est_matrix$time_base))*est_matrix$time_base
est_matrix_wifi$display <- (sum(est_matrix$display)/sum(est_matrix$time_base))*est_matrix$time_base
}
save(energy_measured, est_matrix_raw, est_matrix, est_matrix_wifi,
file=paste(loc, fin, interval, "ss_MAVwifi.Rdata", sep=""))

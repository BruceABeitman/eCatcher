#legend(.5, 1.25, Action_legend_labels, cex=1.5);
#idx = which(m$label == "I")
#points(m$id[idx], m$avg_energy[idx], lwd=1.5, col="red", pch=pch[2])
} else {
idx = which(m$label == "I")
plot(m$id[idx], m$avg_energy[idx], type="p", ylim=ylim, col="red",
pch=pch[2], lwd=1.5, cex.lab=1.2, cex.axis=0.45,
xlab="Action Unit", ylab="Normalized Average Energy Consumption")
# Action Legend
#Action_legend_labels <- c("1   onResume", "2   onClick", "3   AsyncTask")
#legend(1, .2, Action_legend_labels, cex=1);
}
#loc_clus$medoid1[is.na(loc_clus$medoid1)] <- 0
#loc_clus$medoid2[is.na(loc_clus$medoid2)] <- 0
loc_clus$med_spread <- abs(loc_clus$medoid1 - loc_clus$medoid2)
loc_clus$spread_confidence <- loc_clus$med_spread * (1+loc_clus$confidence)
#loc_clusdb <- data.frame(loc_clus$spread_confidence)
#loc_clus_p <- pam(loc_clusdb, k=2)
## Remove unwanted Facebook actions
#idx = which(!(loc_clus$action_ids %in% c(1,9,10,11)))
points(loc_clus$action_ids, loc_clus$spread_confidence, type="p", col="red", pch=pch[1], cex=1.5,lwd=4)
points(loc_clus$action_ids, loc_clus$medoid1, type="p", col="blue", pch=pch[5], cex=.9,lwd=1.5)
points(loc_clus$action_ids, loc_clus$medoid2, type="p", col="blue", pch=pch[5], cex=.9,lwd=1.5)
# Legend
legend_labels <- c("Raw Data", "Medoids", "Group Confidence")
legend(2, 4, legend_labels,
cex=1, pt.cex=1.5, lty=c(2,0,0), lwd=c(.25,1.5,2), col=c("black", "blue", "red"), pch=c(NA, 4, 1), horiz=TRUE);
source("plot_args.R")
library(calibrate)
library(cluster)
library(cluster)
med <- median(m$avg_energy)
if(med > 0)
#print(paste("id:", m$id, sep=" "))
#print(paste("avg_energyBM:", m$avg_energy, sep=" "))
#print(paste("Median:", med, sep=" "))
m$avg_energy <- m$avg_energy/med
#print(paste("avg_energyAM:", m$avg_energy, sep=" "))
# BAB Change ylim if normalization changes
#ylim=c(min(m$avg_energy), min(10, max(m$avg_energy)))
ylim=c(0, max(m$avg_energy))
#boxplot(energy~id, m, main="", lwd=1.5, ylim=ylim)
if(context == TRUE) {
m$id <- m$context_id
}
m_dupe <- m[which(m$id == 0),]
m_dupe$avg_energy <- rep(0, length(m_dupe$avg_energy))
m <- rbind(m, m_dupe)
# List of all action ids
action_ids <- unique(unlist(m$id, use.names = FALSE))
loc_clus <- data.frame(action_ids)
medoids <- c()
local_group_confidence <- c()
avg_energy <- c()
avg_duration <- c()
for (id in loc_clus$action_ids) {
id_idx <- (which(m$id == id))
avg_energy <- c(avg_energy, mean(m$true_avg_energy[id_idx]))
avg_duration <- c(avg_duration, mean(m$duration[id_idx]))
local_avg_energy <- m$avg_energy[id_idx]
local_m <- data.frame(local_avg_energy)
#print(paste("id_idx:", id_idx, sep=" "))
if(length(local_m[[1]]) > 2) {
local_p <- pam(local_m, k=2)
#if (length(which(local_p$clustering == 1)) < 3) {
#  medoids <- rbind(medoids, cbind(NaN,NaN))
#  local_group_confidence <- rbind(local_group_confidence, NaN)
#}
#else if (length(which(local_p$clustering == 2)) < 3) {
#  medoids <- rbind(medoids, cbind(NaN,NaN))
#  local_group_confidence <- rbind(local_group_confidence, NaN)
#}
#else {
medoids <- rbind(medoids, cbind(local_p$medoids[1], local_p$medoids[2]))
local_group_confidence <- rbind(local_group_confidence, abs(mean(diff(local_p$medoids))))
#print(paste("medoids:", local_p$medoids, sep=" "))
#}
}
else {
medoids <- rbind(medoids, cbind(NaN, NaN))
local_group_confidence <- rbind(local_group_confidence, NaN)
}
print(paste("local_group_confidence:", local_group_confidence, sep=" "))
}
loc_clus$medoid1 <- medoids[,1]
loc_clus$medoid2 <- medoids[,2]
loc_clus$med_dist <- local_group_confidence
loc_clus$avg_energy <- avg_energy
loc_clus$avg_duration <- avg_duration
loc_clus$avg_total_energy <- loc_clus$avg_energy * loc_clus$avg_duration
loc_clus$avg_total_energy_perc <- (loc_clus$avg_total_energy)/sum((loc_clus$avg_total_energy))
resp_medoid1 <- c()
resp_medoid2 <- c()
for (id in m$id) {
idx <- which(id == loc_clus$action_ids)
resp_medoid1 <- c(resp_medoid1, loc_clus$medoid1[idx])
resp_medoid2 <- c(resp_medoid2, loc_clus$medoid2[idx])
}
m$resp_medoid1 <- resp_medoid1
m$resp_medoid2 <- resp_medoid2
m$dist_med <- pmin(abs(m$avg_energy - m$resp_medoid1), abs(m$avg_energy - m$resp_medoid2))
for (id in loc_clus$action_ids) {
print(paste("id:", id, sep=" "))
idx <- which(id == m$id)
avg_dist_med <- mean(m$dist_med[idx])
loc_idx <- which(id == loc_clus$action_ids)
loc_clus$avg_dist_med[loc_idx] <- avg_dist_med
}
max_dist <- max(loc_clus$avg_dist_med[!is.na(loc_clus$avg_dist_med)])
loc_clus$confidence <- max_dist - loc_clus$avg_dist_med
#idx = which(m$label == "N")
if(TRUE) {
id <- m$id
#print(paste("id:", id, sep=" "))
#if(!(is.na(id))) {
#    if (id >= 100) {
#        id <- (max(as.numeric(m$id), na.rm = FALSE) + 1)
#        print(paste("ALTid:", id, sep=" "))
#    }
#}
#print(paste("id:", id, sep=" "))
#print(paste("avg_energy:", m$avg_energy[idx], sep=" "))
#par(mar=c(5,5,.1,.1))
par(mar=c(25,5.5,1,.1))
plot(id, m$avg_energy, type="b", outline=FALSE,
lwd=.25,  cex.axis=2, cex.lab=1.5, xaxt='n',
#xlim=c(40, 80),
las=1,
ylim=c(0, 2),
ylab="")
mtext("Normalized Avg. Energy", side=2, line=3.75, cex=1.75)
idx = which(m$label == "I")
axis(1,1:6, labels=FALSE, tick=FALSE, line=-.5)
ActionLabels <- c("AsyncThread \n(No Display)", "onResume", "onCreateOptions", "OptSelected", "onCreate", "onClick", "AsyncThread\n(Display)")
text(x = seq(1, 7, by=1), par("usr")[1]-.325, labels = ActionLabels, srt = -90, xpd = TRUE, cex=1.25, adj = c(0,.5))
# Action Legend
#Action_legend_labels <- c("0   AsyncTask (No Display)","1   onOptionsItemSelected", "2   Preferences->onCreate"
#                        , "3   onResume", "4   onClick", "5   AsyncTask (With Display)")
#legend(.5, 1.25, Action_legend_labels, cex=1.5);
#idx = which(m$label == "I")
#points(m$id[idx], m$avg_energy[idx], lwd=1.5, col="red", pch=pch[2])
} else {
idx = which(m$label == "I")
plot(m$id[idx], m$avg_energy[idx], type="p", ylim=ylim, col="red",
pch=pch[2], lwd=1.5, cex.lab=1.2, cex.axis=0.45,
xlab="Action Unit", ylab="Normalized Average Energy Consumption")
# Action Legend
#Action_legend_labels <- c("1   onResume", "2   onClick", "3   AsyncTask")
#legend(1, .2, Action_legend_labels, cex=1);
}
#loc_clus$medoid1[is.na(loc_clus$medoid1)] <- 0
#loc_clus$medoid2[is.na(loc_clus$medoid2)] <- 0
loc_clus$med_spread <- abs(loc_clus$medoid1 - loc_clus$medoid2)
loc_clus$spread_confidence <- loc_clus$med_spread * (1+loc_clus$confidence)
#loc_clusdb <- data.frame(loc_clus$spread_confidence)
#loc_clus_p <- pam(loc_clusdb, k=2)
## Remove unwanted Facebook actions
#idx = which(!(loc_clus$action_ids %in% c(1,9,10,11)))
points(loc_clus$action_ids, loc_clus$spread_confidence, type="p", col="red", pch=pch[1], cex=1.5,lwd=4)
points(loc_clus$action_ids, loc_clus$medoid1, type="p", col="blue", pch=pch[5], cex=.9,lwd=1.5)
points(loc_clus$action_ids, loc_clus$medoid2, type="p", col="blue", pch=pch[5], cex=.9,lwd=1.5)
# Legend
legend_labels <- c("Raw Data", "Medoids", "Group Confidence")
legend(2, 4, legend_labels,
cex=1, pt.cex=1.5, lty=c(2,0,0), lwd=c(.25,1.5,2), col=c("black", "blue", "red"), pch=c(NA, 4, 1), horiz=TRUE);
View(loc_clus)
wd <- getwd()
data_path <- paste(wd, "/actions", sep="")
action_files <- list.files(path=data_path, pattern="^action_",
full.names=TRUE, recursive=FALSE)
action_avg_energy <- c()
ret <- apply(as.array(action_files), 1,
function(x) {
load(x)
## use average energy consumption instead of the absolute total value
## By doing this, we can remove the effect caused by the length of the
## action, and have two separate attributes: average energy & duration.
## The effect of the duration is: small power draw * long duration might
## have the same value of large power draw * short duration.
## ignore records with duration 0 if they happened rarely
effective_idx <- c(1:length(total_time))
if(length(which(total_time==0)) < length(total_time)/4) {
effective_idx <- which(total_time>0)
}
total_time_s <- total_time/1000
avg_energy <- total_energy/total_time_s
avg_energy[which(is.na(avg_energy))] <- 0
#print(paste("ID:", action_id, sep=" "))
#print(paste("avg_energy:", avg_energy, sep=" "))
#print(paste("total_energy:", total_energy, sep=" "))
#print(paste("total_time:", total_time, sep=" "))
#print(paste("section_time:", section_time, sep=" "))
#print(paste("total_action_start:", total_action_start, sep=" "))
#print(paste("total_action_end:", total_action_end, sep=" "))
#m <- median(avg_energy)
##m <- mean(avg_energy)
#if(m > 0)
#  avg_energy <- avg_energy/m
context_id <- paste(prev_id, action_id, next_id, sep="_")
energy_local <- cbind(action_id, avg_energy[effective_idx],
action_label[effective_idx],
action_thread[effective_idx],
#section_time[effective_idx],
total_time[effective_idx],
log_name[effective_idx], context_id[effective_idx],
total_action_start[effective_idx],
total_action_end[effective_idx])
if (action_id %in% c(0,2,3,4,5,6,7)) {
action_avg_energy <<- rbind(action_avg_energy, energy_local)
}
## plot energy dist in an action
action_energy_local <- data.frame(id=as.factor(energy_local[,1]),
avg_energy=as.numeric(energy_local[,2]),
label=energy_local[,3],
thread=energy_local[,4],
#time=as.numeric(energy_local[,4]),
duration=as.numeric(energy_local[,5]),
context_id=as.factor(energy_local[,7]),
action_start=as.numeric(energy_local[,8]),
action_end=as.numeric(energy_local[,9]))
out_name <- strsplit(basename(x), split=".Rdata")[[1]]
#print(paste("out_name:", out_name, sep=" "))
plot_action_energy(action_energy_local, save=TRUE,
path=data_path, out_name=paste(out_name, "energy", sep="_"))
#plot_action_duration(action_energy_local, save=TRUE,
#                     path=data_path, out_name=paste(out_name, "duration", sep="_"))
})
action_energy <- data.frame(id=as.factor(action_avg_energy[,1]),
avg_energy=as.numeric(action_avg_energy[,2]),
label=action_avg_energy[,3],
thread=action_avg_energy[,4],
#time=as.numeric(action_avg_energy[,4]),
duration=as.numeric(action_avg_energy[,5]),
context_id=as.factor(action_avg_energy[,7]),
action_start=as.numeric(action_avg_energy[,8]),
action_end=as.numeric(action_avg_energy[,9]))
View(action_energy)
action_files
setwd("/home/beitman/Projects/MobEBug/MobEBug/project_code/energy_analysis/activity_mapper/log/boston.Bus.Map/")
wd <- getwd()
data_path <- paste(wd, "/actions", sep="")
action_files <- list.files(path=data_path, pattern="^action_",
full.names=TRUE, recursive=FALSE)
action_avg_energy <- c()
ret <- apply(as.array(action_files), 1,
function(x) {
load(x)
## use average energy consumption instead of the absolute total value
## By doing this, we can remove the effect caused by the length of the
## action, and have two separate attributes: average energy & duration.
## The effect of the duration is: small power draw * long duration might
## have the same value of large power draw * short duration.
## ignore records with duration 0 if they happened rarely
effective_idx <- c(1:length(total_time))
if(length(which(total_time==0)) < length(total_time)/4) {
effective_idx <- which(total_time>0)
}
total_time_s <- total_time/1000
avg_energy <- total_energy/total_time_s
avg_energy[which(is.na(avg_energy))] <- 0
#print(paste("ID:", action_id, sep=" "))
#print(paste("avg_energy:", avg_energy, sep=" "))
#print(paste("total_energy:", total_energy, sep=" "))
#print(paste("total_time:", total_time, sep=" "))
#print(paste("section_time:", section_time, sep=" "))
#print(paste("total_action_start:", total_action_start, sep=" "))
#print(paste("total_action_end:", total_action_end, sep=" "))
#m <- median(avg_energy)
##m <- mean(avg_energy)
#if(m > 0)
#  avg_energy <- avg_energy/m
context_id <- paste(prev_id, action_id, next_id, sep="_")
energy_local <- cbind(action_id, avg_energy[effective_idx],
action_label[effective_idx],
action_thread[effective_idx],
#section_time[effective_idx],
total_time[effective_idx],
log_name[effective_idx], context_id[effective_idx],
total_action_start[effective_idx],
total_action_end[effective_idx])
if (action_id %in% c(0,2,3,4,5,6,7)) {
action_avg_energy <<- rbind(action_avg_energy, energy_local)
}
## plot energy dist in an action
action_energy_local <- data.frame(id=as.factor(energy_local[,1]),
avg_energy=as.numeric(energy_local[,2]),
label=energy_local[,3],
thread=energy_local[,4],
#time=as.numeric(energy_local[,4]),
duration=as.numeric(energy_local[,5]),
context_id=as.factor(energy_local[,7]),
action_start=as.numeric(energy_local[,8]),
action_end=as.numeric(energy_local[,9]))
out_name <- strsplit(basename(x), split=".Rdata")[[1]]
#print(paste("out_name:", out_name, sep=" "))
plot_action_energy(action_energy_local, save=TRUE,
path=data_path, out_name=paste(out_name, "energy", sep="_"))
#plot_action_duration(action_energy_local, save=TRUE,
#                     path=data_path, out_name=paste(out_name, "duration", sep="_"))
})
action_energy <- data.frame(id=as.factor(action_avg_energy[,1]),
avg_energy=as.numeric(action_avg_energy[,2]),
label=action_avg_energy[,3],
thread=action_avg_energy[,4],
#time=as.numeric(action_avg_energy[,4]),
duration=as.numeric(action_avg_energy[,5]),
context_id=as.factor(action_avg_energy[,7]),
action_start=as.numeric(action_avg_energy[,8]),
action_end=as.numeric(action_avg_energy[,9]))
View(action_energy)
action_files
wd <- getwd()
data_path <- paste(wd, "/actions", sep="")
action_files <- list.files(path=data_path, pattern="^action_",
full.names=TRUE, recursive=FALSE)
action_avg_energy <- c()
ret <- apply(as.array(action_files), 1,
function(x) {
load(x)
## use average energy consumption instead of the absolute total value
## By doing this, we can remove the effect caused by the length of the
## action, and have two separate attributes: average energy & duration.
## The effect of the duration is: small power draw * long duration might
## have the same value of large power draw * short duration.
## ignore records with duration 0 if they happened rarely
effective_idx <- c(1:length(total_time))
if(length(which(total_time==0)) < length(total_time)/4) {
effective_idx <- which(total_time>0)
}
total_time_s <- total_time/1000
avg_energy <- total_energy/total_time_s
avg_energy[which(is.na(avg_energy))] <- 0
#print(paste("ID:", action_id, sep=" "))
#print(paste("avg_energy:", avg_energy, sep=" "))
#print(paste("total_energy:", total_energy, sep=" "))
#print(paste("total_time:", total_time, sep=" "))
#print(paste("section_time:", section_time, sep=" "))
#print(paste("total_action_start:", total_action_start, sep=" "))
#print(paste("total_action_end:", total_action_end, sep=" "))
#m <- median(avg_energy)
##m <- mean(avg_energy)
#if(m > 0)
#  avg_energy <- avg_energy/m
context_id <- paste(prev_id, action_id, next_id, sep="_")
energy_local <- cbind(action_id, avg_energy[effective_idx],
action_label[effective_idx],
action_thread[effective_idx],
#section_time[effective_idx],
total_time[effective_idx],
log_name[effective_idx], context_id[effective_idx],
total_action_start[effective_idx],
total_action_end[effective_idx])
if (action_id %in% c(0,2,3,4,5,6,7)) {
action_avg_energy <<- rbind(action_avg_energy, energy_local)
}
## plot energy dist in an action
action_energy_local <- data.frame(id=as.factor(energy_local[,1]),
avg_energy=as.numeric(energy_local[,2]),
label=energy_local[,3],
thread=energy_local[,4],
#time=as.numeric(energy_local[,4]),
duration=as.numeric(energy_local[,5]),
context_id=as.factor(energy_local[,7]),
action_start=as.numeric(energy_local[,8]),
action_end=as.numeric(energy_local[,9]))
out_name <- strsplit(basename(x), split=".Rdata")[[1]]
#print(paste("out_name:", out_name, sep=" "))
#plot_action_energy(action_energy_local, save=TRUE,
#                    path=data_path, out_name=paste(out_name, "energy", sep="_"))
#plot_action_duration(action_energy_local, save=TRUE,
#                     path=data_path, out_name=paste(out_name, "duration", sep="_"))
})
action_energy <- data.frame(id=as.factor(action_avg_energy[,1]),
avg_energy=as.numeric(action_avg_energy[,2]),
label=action_avg_energy[,3],
thread=action_avg_energy[,4],
#time=as.numeric(action_avg_energy[,4]),
duration=as.numeric(action_avg_energy[,5]),
context_id=as.factor(action_avg_energy[,7]),
action_start=as.numeric(action_avg_energy[,8]),
action_end=as.numeric(action_avg_energy[,9]))
m <- action_energy
## m contains 4 lists: id, energy, label, duration
med <- median(m$avg_energy)
if(med > 0)
#print(paste("id:", m$id, sep=" "))
#print(paste("avg_energyBM:", m$avg_energy, sep=" "))
#print(paste("Median:", med, sep=" "))
m$avg_energy <- m$avg_energy/med
#print(paste("avg_energyAM:", m$avg_energy, sep=" "))
# BAB Change ylim if normalization changes
#ylim=c(min(m$avg_energy), min(10, max(m$avg_energy)))
ylim=c(0, max(m$avg_energy))
#boxplot(energy~id, m, main="", lwd=1.5, ylim=ylim)
if(context == TRUE) {
m$id <- m$context_id
}
m_dupe <- m[which(m$id == 0),]
m_dupe$avg_energy <- rep(0, length(m_dupe$avg_energy))
m <- rbind(m, m_dupe)
# List of all action ids
action_ids <- unique(unlist(m$id, use.names = FALSE))
loc_clus <- data.frame(action_ids)
medoids <- c()
local_group_confidence <- c()
avg_energy <- c()
avg_duration <- c()
for (id in loc_clus$action_ids) {
id_idx <- (which(m$id == id))
avg_energy <- c(avg_energy, mean(m$true_avg_energy[id_idx]))
avg_duration <- c(avg_duration, mean(m$duration[id_idx]))
local_avg_energy <- m$avg_energy[id_idx]
local_m <- data.frame(local_avg_energy)
#print(paste("id_idx:", id_idx, sep=" "))
if(length(local_m[[1]]) > 2) {
local_p <- pam(local_m, k=2)
#if (length(which(local_p$clustering == 1)) < 3) {
#  medoids <- rbind(medoids, cbind(NaN,NaN))
#  local_group_confidence <- rbind(local_group_confidence, NaN)
#}
#else if (length(which(local_p$clustering == 2)) < 3) {
#  medoids <- rbind(medoids, cbind(NaN,NaN))
#  local_group_confidence <- rbind(local_group_confidence, NaN)
#}
#else {
medoids <- rbind(medoids, cbind(local_p$medoids[1], local_p$medoids[2]))
local_group_confidence <- rbind(local_group_confidence, abs(mean(diff(local_p$medoids))))
#print(paste("medoids:", local_p$medoids, sep=" "))
#}
}
else {
medoids <- rbind(medoids, cbind(NaN, NaN))
local_group_confidence <- rbind(local_group_confidence, NaN)
}
print(paste("local_group_confidence:", local_group_confidence, sep=" "))
}
loc_clus$medoid1 <- medoids[,1]
loc_clus$medoid2 <- medoids[,2]
loc_clus$med_dist <- local_group_confidence
loc_clus$avg_energy <- avg_energy
loc_clus$avg_duration <- avg_duration
loc_clus$avg_total_energy <- loc_clus$avg_energy * loc_clus$avg_duration
loc_clus$avg_total_energy_perc <- (loc_clus$avg_total_energy)/sum((loc_clus$avg_total_energy))
resp_medoid1 <- c()
resp_medoid2 <- c()
for (id in m$id) {
idx <- which(id == loc_clus$action_ids)
resp_medoid1 <- c(resp_medoid1, loc_clus$medoid1[idx])
resp_medoid2 <- c(resp_medoid2, loc_clus$medoid2[idx])
}
m$resp_medoid1 <- resp_medoid1
m$resp_medoid2 <- resp_medoid2
m$dist_med <- pmin(abs(m$avg_energy - m$resp_medoid1), abs(m$avg_energy - m$resp_medoid2))
for (id in loc_clus$action_ids) {
print(paste("id:", id, sep=" "))
idx <- which(id == m$id)
avg_dist_med <- mean(m$dist_med[idx])
loc_idx <- which(id == loc_clus$action_ids)
loc_clus$avg_dist_med[loc_idx] <- avg_dist_med
}
max_dist <- max(loc_clus$avg_dist_med[!is.na(loc_clus$avg_dist_med)])
loc_clus$confidence <- max_dist - loc_clus$avg_dist_med
#idx = which(m$label == "N")
if(TRUE) {
id <- m$id
#print(paste("id:", id, sep=" "))
#if(!(is.na(id))) {
#    if (id >= 100) {
#        id <- (max(as.numeric(m$id), na.rm = FALSE) + 1)
#        print(paste("ALTid:", id, sep=" "))
#    }
#}
#print(paste("id:", id, sep=" "))
#print(paste("avg_energy:", m$avg_energy[idx], sep=" "))
#par(mar=c(5,5,.1,.1))
par(mar=c(25,5.5,1,.1))
plot(id, m$avg_energy, type="b", outline=FALSE,
lwd=.25,  cex.axis=2, cex.lab=1.5, xaxt='n',
#xlim=c(40, 80),
las=1,
ylim=c(0, 2),
ylab="")
mtext("Normalized Avg. Energy", side=2, line=3.75, cex=1.75)
idx = which(m$label == "I")
axis(1,1:6, labels=FALSE, tick=FALSE, line=-.5)
ActionLabels <- c("AsyncThread \n(No Display)", "onResume", "onCreateOptions", "OptSelected", "onCreate", "onClick", "AsyncThread\n(Display)")
text(x = seq(1, 7, by=1), par("usr")[1]-.325, labels = ActionLabels, srt = -90, xpd = TRUE, cex=1.25, adj = c(0,.5))
# Action Legend
#Action_legend_labels <- c("0   AsyncTask (No Display)","1   onOptionsItemSelected", "2   Preferences->onCreate"
#                        , "3   onResume", "4   onClick", "5   AsyncTask (With Display)")
#legend(.5, 1.25, Action_legend_labels, cex=1.5);
#idx = which(m$label == "I")
#points(m$id[idx], m$avg_energy[idx], lwd=1.5, col="red", pch=pch[2])
} else {
idx = which(m$label == "I")
plot(m$id[idx], m$avg_energy[idx], type="p", ylim=ylim, col="red",
pch=pch[2], lwd=1.5, cex.lab=1.2, cex.axis=0.45,
xlab="Action Unit", ylab="Normalized Average Energy Consumption")
# Action Legend
#Action_legend_labels <- c("1   onResume", "2   onClick", "3   AsyncTask")
#legend(1, .2, Action_legend_labels, cex=1);
}
#loc_clus$medoid1[is.na(loc_clus$medoid1)] <- 0
#loc_clus$medoid2[is.na(loc_clus$medoid2)] <- 0
loc_clus$med_spread <- abs(loc_clus$medoid1 - loc_clus$medoid2)
loc_clus$spread_confidence <- loc_clus$med_spread * (1+loc_clus$confidence)
View(loc_clus)
loc_clusdb <- data.frame(loc_clus$spread_confidence)
loc_clus_p <- pam(loc_clusdb, k=2)
loc_clus_p$medoids[1]
setwd("/home/beitman/Projects/MobEBug/OrigMobEBug/project_code/")
setwd("power_model/")

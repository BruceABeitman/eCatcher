return(coef)
}
coef_calc1(T)
library(nnls)
library("nnls", lib="/home//home/R/x86_64-pc-linux-gnu-library/2.14/")
setwd("/home/beitman/Projects/MobEBug/OrigMobEBug/project_code/power_model/")
source("power-model/lib_plot.R")
source("power-model/model_matrix.R")
#----------------------------------------------------------------
# Power model: mws, cpu, display, wifi, wifi_base, time_base
# E = a(CPU Util) + b(Display Util) + c(Wifi Utily) + K
# CPU Util = SUM(CPU freq * delta(t))
# Display Util = SUM(brightness * delta(t))
# Wifi Util = SUM(Wifi rate * delta(t)) = SUM(bytes sent & received during delta(t))
# K = K_base * T = K_base * SUM(delta(t))
# T ~ 500ms
#
# Separate Wifi base (W) from Base (K)
# E = a(CPU Util) + b(Display Util) + (c(Wifi Utily)+W) + K
print("two coefficient calculation approaches:")
print("1-step method: coef_calc1(wifi), data saved to coef/coef1.Rdata")
print("2-step method: coef_calc2(), data saved to coef/coef2.Rdata")
# Calculation 1: normal approach
coef_calc1 <- function(wifi=T) {
m <- data.frame()
m <- rbind(m, load_base())
m <- rbind(m, load_wifi())
if(wifi == T) {
m <- rbind(m, load_display(T))
m <- rbind(m, load_cpu(T))
} else {
m <- rbind(m, load_display())
m <- rbind(m, load_cpu())
}
#base <- data.frame(mws=max(m$mws), cpu=max(m$cpu), display=max(m$display), wifi=max(m$wifi),
#                   wifi_base=max(m$wifi_base), time_base=max(m$time_base))
#
#m$mws <- m$mws/base$mws
#m$cpu <- m$cpu/base$cpu
#m$display <- m$display/base$display
#if(base$wifi > 0) m$wifi <- m$wifi/base$wifi
#if(base$wifi_base > 0) m$wifi_base <- m$wifi_base/base$wifi_base
#m$time_base <- m$time_base/base$time_base
#plot_data(m, T)
#plot_wifi(m, F)
#plot_cpu(m, F)
#plot_display(m, T)
nnls_a <- cbind(m$cpu, m$display, m$wifi, m$wifi_base, m$time_base)
nnls_b <- m$mws
power.nnls <- nnls(nnls_a, nnls_b)
coef <- data.frame(cpu=power.nnls$x[1], display=power.nnls$x[2],
wifi=power.nnls$x[3], wifi_base=power.nnls$x[4],
time_base=power.nnls$x[5])
if(wifi == T) save(m, coef, nnls_a, nnls_b, power.nnls, file="power_model_data/TEST/disp_trunc_coefMAV20ss_wifi.Rdata")
#else save(m, coef, nnls_a, nnls_b, power.nnls, file="power_model_data/TEST/coef15ss.Rdata")
return(coef)
}
coef_calc1(T)
setwd("../")
setwd("energy_analysis/activity_mapper/")
wd <- scan(what=character(0), nmax=1)
package_name <- scan(what=character(0), nmax=1)
targeted_log <- scan(what=character(0), nmax=1)
context <- FALSE
in_util <- paste(targeted_log, "_util.log.util", sep="")
app_util_raw <- read.table(in_util, header=TRUE, stringsAsFactors=FALSE)
setwd("log/")
in_util <- paste(targeted_log, "_util.log.util", sep="")
app_util_raw <- read.table(in_util, header=TRUE, stringsAsFactors=FALSE)
## elapsed time for each record (msec)
up_time_diff <- diff(app_util_raw$up_time, lag=1)
up_time_diff[length(up_time_diff)+1] <- 0
app_util_raw$up_time_diff <- up_time_diff
## Calculate component utilization per ~502ms
## up_time_diff should be all about 500ms
## cpu utilization
work_time_diff <- diff(app_util_raw$cpu_app, lag=1)
total_time_diff <- diff(app_util_raw$cpu_total, lag=1)
idle_time_diff <- diff(app_util_raw$cpu_idle, lag=1)
cpu_frac <- work_time_diff/total_time_diff
cpu_idle_frac <- idle_time_diff/total_time_diff
cpu_frac[length(cpu_frac)+1] <- 0
cpu_idle_frac[length(cpu_idle_frac)+1] <- 0
## cpu_factor = cpu_freq * utilization * time in ms
cpu_factor <- app_util_raw$cpu_freq * cpu_frac * up_time_diff
cpu_idle_factor <- app_util_raw$cpu_freq * cpu_idle_frac * up_time_diff
## display_factor = display_on (1/0) * brightness * time in ms
display_factor <- app_util_raw$display_use * app_util_raw$display_on *
app_util_raw$brightness * up_time_diff
## wifi # of data received in KB
wifi_rx_diff <- diff(app_util_raw$wifi_rx, lag=1)/1000
wifi_rx_diff[length(wifi_rx_diff)+1] <- 0
## wifi # of data sent in KB
wifi_tx_diff <- diff(app_util_raw$wifi_tx, lag=1)/1000
wifi_tx_diff[length(wifi_tx_diff)+1] <- 0
## total data transmision on wifi
wifi_total_diff <- wifi_rx_diff + wifi_tx_diff
## wifi_base = wifi_on (1/0) * time in ms
wifi_base <- app_util_raw$wifi_on * up_time_diff
## app utilization raw matrix
app_util_raw <- cbind(app_util_raw, up_time_diff, cpu_frac, cpu_idle_frac, cpu_factor, cpu_idle_factor,
display_factor, wifi_base, wifi_total_diff,
wifi_rx_diff, wifi_tx_diff)
#app_util_raw <- data.frame(app_util_raw)
app_util_raw <- app_util_raw[1:(length(app_util_raw$up_time)-1),]
## To further estimate the energy consumption of an app, we need to
## calculate the average of each component utilization per 10 seconds,
## and then use the pre-built per-phone power model for the estimation.
##
## In our power model, we keep wifi and phone base consumption shared
## with all processes/apps, and therefore, simply the sum of estimated
## energy consumed by all apps will be larger than the whole phone
## energy consumption estimated. Guess we can estimate the energy
## specifically used by an app by excluding wifi and phone base energy
## consumption.
app_util_est <- data.frame(up_time=app_util_raw$up_time,
time_base=app_util_raw$up_time_diff,
display_use=app_util_raw$display_use)
## Check if it's 500ms between records, remove any larger than 20% off
app_util_est <- app_util_est[which(app_util_est$time_base < 600),]
app_util_raw <- app_util_raw[which(app_util_raw$up_time_diff < 600),]
app_util_est <- app_util_est[which(app_util_est$time_base > 400),]
app_util_raw <- app_util_raw[which(app_util_raw$up_time_diff > 400),]
## Moving Average Function
mavg <- function(x,s=5){
n <- ceiling(length(x)/s)
#x <- sortedm$ranking
#MAranking <- mav(ranking, length(ranking)/5)
res <- c()
## Handles first n/2 elements
for (iter in 1:(ceiling(n/2))) {
end <- ((ceiling(n/2)) + iter)
start <- 1
tmp_mean <- mean(x[start:end])
res <- c(res, tmp_mean)
}
tmp <- c(res, x[(ceiling(n/2)):(length(x))])
tx = data.frame(x)
tdfa = data.frame(tmp)
for (iter in (ceiling(n/2)+1):(length(x) - (ceiling(n/2)))) {
end <- ((ceiling(n/2)) + iter)
start <- (iter - (ceiling(n/2)))
tmp_mean <- mean(x[start:end])
res <- c(res, tmp_mean)
}
## Handles all middle elements
#res <- c(res, filter(tmp,rep(1/n,n),sides=2)[(ceiling(n/2)):(length(tmp))])
#res <- c(res, mid_res)
tdf = data.frame(res)
## Handles last n/2 elements
end_res <- c()
for (iter in (length(x) - (ceiling(n/2))):(length(x))) {
end <- length(x)
start <- (iter - (ceiling(n/2)))
tmp_mean <- mean(x[start:end])
end_res <- c(end_res, tmp_mean)
}
tdfe = data.frame(end_res)
res <- c(res[1:(length(x) - (ceiling(n/2)))], end_res[1:(length(end_res)-1)])
tdfet = data.frame(res)
return (res)
}
interval <- 20 # 10 seconds
length(app_util_raw$up_time)%/%interval
num_section >= 1
num_section <- length(app_util_raw$up_time)%/%interval
num_section >= 1
cpu_rate <- apply(array(1:num_section), 1,
function(x)
sum(app_util_raw$cpu_factor[(1+interval*(x-1)):(interval*x)])/
sum(app_util_raw$up_time_diff[(1+interval*(x-1)):(interval*x)]))
cpu_idle_rate <- apply(array(1:num_section), 1,
function(x)
sum(app_util_raw$cpu_idle_factor[(1+interval*(x-1)):(interval*x)])/
sum(app_util_raw$up_time_diff[(1+interval*(x-1)):(interval*x)]))
display_rate <- apply(array(1:num_section), 1,
function(x)
sum(app_util_raw$display_factor[(1+interval*(x-1)):(interval*x)])/
sum(app_util_raw$up_time_diff[(1+interval*(x-1)):(interval*x)]))
wifi_rate <- apply(array(1:num_section), 1,
function(x)
sum(app_util_raw$wifi_total_diff[(1+interval*(x-1)):(interval*x)])/
sum(app_util_raw$up_time_diff[(1+interval*(x-1)):(interval*x)]))
wifi_base_rate <- apply(array(1:num_section), 1,
function(x)
sum(app_util_raw$wifi_base[(1+interval*(x-1)):(interval*x)])/
sum(app_util_raw$up_time_diff[(1+interval*(x-1)):(interval*x)]))
#mws_rate <- apply(array(1:num_section), 1,
#  function(x)
#    sum(app_util_raw$mws[(1+interval*(x-1)):(interval*x)])/
#    sum(app_util_raw$up_time_diff[(1+interval*(x-1)):(interval*x)]))
app_util_est$cpu <- 0
app_util_est$cpuidle <- 0
app_util_est$display <- 0
app_util_est$wifi <- 0
app_util_est$wifi_base <- 0
#app_util_est$mws <- 0
# Moving average approach
app_util_est$wifi <- mavg(app_util_raw$wifi, interval)
app_util_est$wifi <- ((est_matrix_wifi$wifi)/(mavg(app_util_raw$time_base)))
app_util_est$cpu <- mavg(app_util_raw$cpu, interval)
app_util_est$cpu <- ((est_matrix_wifi$cpu)/(mavg(app_util_raw$time_base)))
#est_matrix_wifit$cpu_base <- mavg(est_matrix$cpu_base, interval)
#est_matrix_wifit$cpu_base <- ((est_matrix_wifit$cpu_base)/(mavg(est_matrix$time_base)))
app_util_est$mws <- mavg(app_util_raw$mws, interval)
app_util_est$mws <- ((est_matrix_wifi$mws)/(mavg(app_util_raw$time_base)))
app_util_est$display <- mavg(app_util_raw$display, interval)
app_util_est$display <- ((est_matrix_wifi$display)/(mavg(app_util_raw$time_base)))
# Jau-Yuan's non-moving average approach
#for(x in 1:num_section) {
#  app_util_est$cpu[(1+interval*(x-1)):(interval*x)] <- cpu_rate[x]
#  app_util_est$cpuidle[(1+interval*(x-1)):(interval*x)] <- cpu_idle_rate[x]
#  app_util_est$display[(1+interval*(x-1)):(interval*x)] <- display_rate[x]
#  app_util_est$wifi[(1+interval*(x-1)):(interval*x)] <- wifi_rate[x]
#  app_util_est$wifi_base[(1+interval*(x-1)):(interval*x)] <- wifi_base_rate[x]
#  #app_util_est$mws[(1+interval*(x-1)):(interval*x)] <- mws_rate[x]
#}
# Do not need to discard if using moving average approach
#if(length(app_util_raw$up_time)%%interval < 16) {
#  ## discard the last few data because of the length being too short
#  app_util_est <- app_util_est[1:(num_section*interval),]
#} else {
#  section_begin <- (1 + num_section * interval)
#  section_end <- length(app_util_raw$up_time)
#  app_util_est$cpu[section_begin:section_end] <-
#    sum(app_util_raw$cpu_factor[section_begin:section_end])/
#    sum(app_util_raw$up_time_diff[section_begin:section_end])
#
#  app_util_est$cpuidle[section_begin:section_end] <-
#    sum(app_util_raw$cpu_idle_factor[section_begin:section_end])/
#    sum(app_util_raw$up_time_diff[section_begin:section_end])
#
#  app_util_est$display[section_begin:section_end] <-
#    sum(app_util_raw$display_factor[section_begin:section_end])/
#    sum(app_util_raw$up_time_diff[section_begin:section_end])
#
#  app_util_est$wifi[section_begin:section_end] <-
#    sum(app_util_raw$wifi_total_diff[section_begin:section_end])/
#    sum(app_util_raw$up_time_diff[section_begin:section_end])
#
#  app_util_est$wifi_base[section_begin:section_end] <-
#    sum(app_util_raw$wifi_base[section_begin:section_end])/
#    sum(app_util_raw$up_time_diff[section_begin:section_end])
#
#  #app_util_est$mws[section_begin:section_end] <-
#  #                  sum(app_util_raw$mws[section_begin:section_end])/
#  #                  sum(app_util_raw$up_time_diff[section_begin:section_end])
#
#}
## apply the average utilization to each time period
app_util_est$cpu <- app_util_est$cpu*app_util_est$time_base
app_util_est$cpuidle <- app_util_est$cpuidle*app_util_est$time_base
app_util_est$display <- app_util_est$display*app_util_est$time_base
app_util_est$wifi <- app_util_est$wifi*app_util_est$time_base
app_util_est$wifi_base <- app_util_est$wifi_base*app_util_est$time_base
#app_util_est$mws <- app_util_est$mws*app_util_est$time_base
dir.create(package_name)
print(paste("Save util info: ", package_name, "/", targeted_log, "_util.Rdata", sep=""))
save(app_util_raw, app_util_est, file=paste(package_name, "/", targeted_log, "_util.Rdata", sep=""))
## read app action log file
in_action <- paste(targeted_log, "_user.log.action", sep="")
print(paste("Read app action file: ", in_action, sep=""))
app_action <- readLines(in_action)
app_action <- strsplit(app_action, " ")
## Enter idle data to action log
in_action <- paste(targeted_log, "_user.log_idle.action", sep="")
print(paste("Read app idle action file: ", in_action, sep=""))
app_idle_action <- readLines(in_action)
app_idle_action <- strsplit(app_idle_action[], " ")
#abs_starts <- sapply(app_action,"[[", 4)
#abs_idle_starts <- sapply(app_idle_action,"[[", 3)
#idle_idx <- which(abs_starts < abs_idle_starts)
#for(i in abs_idle_starts) {
#  print(paste("i: ", i, sep=""))
#  idle_idx <- max(which(abs_starts < i))
#  app_action[[idle_idx]] <-
#  print(paste("idle_idx: ", idle_idx, sep=""))
#}
## add the previous and the next action info for each action
ret <- apply(array(1:length(app_action)), 1,
function(x) {
if(x>1 && x<length(app_action)) {
app_action[[x]] <<- c(app_action[[x]][1:2],  ## action_id, action_hash
app_action[[x-1]][1],  ## prev_action_id
app_action[[x+1]][1],  ## next_action_id
#action_label, section time sequence (# >= 1)
app_action[[x]][3:length(app_action[[x]])])
} else if(x == 1) {
app_action[[x]] <<- c(app_action[[x]][1:2],  ## action_id, action_hash
-1,  ## prev_action_id
app_action[[x+1]][1],  ## next_action_id
#action_label, section time sequence (# >= 1)
app_action[[x]][3:length(app_action[[x]])])
} else if(x == length(app_action)) {
app_action[[x]] <<- c(app_action[[x]][1:2],  ## action_id, action_hash
app_action[[x-1]][1],  ## prev_action_id
-1,  ## next_action_id
#action_label, section time sequence (# >= 1)
app_action[[x]][3:length(app_action[[x]])])
}
})
## app_action_energy:
##  c(action_id, action_hash, prev_id, next_id, action_label,
##    total_energy, section energy sequence (# of items >= 1),
##    total_time, section time sequence (# of items >= 1))
app_action_id <- c()
app_action_hash <- c()
app_action_label <- c()
app_total_energy <- c()
app_section_energy <- c()
app_total_time <- c()
app_section_time <- c()
# BAB action chronological ordering
app_action_start <- c()
app_action_end <- c()
dir.create(paste(package_name, "/actions", sep=""))
last_mark <- 0
ret <- lapply(app_action,
function(seq) {
## map the energy consumed by each action
## we should use the whole sequence of an action to find out the section in app_log;
## otherwise, it might come out with some results (when the sequence length is only 2
## and both time stamp are the same)
action_id_local <- seq[1]
action_hash_local <- seq[2]
prev_id_local <- seq[3]
next_id_local <- seq[4]
action_label_local <- seq[5]
#print(paste("action_id_local:", action_id_local, sep=" "))
#print(paste("action_hash_local:", action_hash_local, sep=" "))
#print(paste("prev_id_local:", prev_id_local, sep=" "))
#print(paste("next_id_local:", next_id_local, sep=" "))
#print(paste("action_label_local:", action_label_local, sep=" "))
# BAB Added
action_absolute_start <- seq[6]
action_absolute_end <- seq[7]
#print(paste("action_absolute_start:", action_absolute_start, sep=" "))
#print(paste("action_absolute_end:", action_absolute_end, sep=" "))
action_start_index <- 6
action_len <- length(seq) - action_start_index + 1
action_start <- which(apply(embed(as.character(app_log$up_time), action_len), 1,
identical, as.character(rev(seq[action_start_index:length(seq)]))))
## correctness check
if(length(action_start) > 1) {
print(paste("id:", action_id_local, sep=" "))
print(paste("last id:", prev_id_local, sep=" "))
print(paste("next id:", next_id_local, sep=" "))
print(paste("time:", seq[action_start_index], sep=" "))
print(paste("action_start:", action_start, sep=" "))
print(paste("last_mark:", last_mark, sep=" "))
action_start <- action_start[which(action_start==(last_mark+1))]
#print(paste("set action_start:", action_start, sep=" "))
}
action_end <- action_start + action_len - 1
last_mark <<- action_end
section_energy_local <- app_log$energy[action_start:(action_end-1)]
total_energy_local <- sum(section_energy_local)
section_time_local <- app_log$up_time_diff[action_start:(action_end-1)]
total_time_local <- sum(section_time_local)
#print(paste("app_log$energy:", app_log$energy, sep=" "))
## for per action record
## if sequence is out of util log range, total_energy_local will be NA
if(!(is.na(total_energy_local)) && !(total_energy_local==0)) {
## aggregate app action energy
if(context == TRUE) {
action_file <- paste(package_name, "/actions/action_",
prev_id_local, "_", action_id_local, "_", next_id_local,
".Rdata", sep="")
} else {
action_file <- paste(package_name, "/actions/action_",
action_id_local, ".Rdata", sep="")
}
# BAB Added for chrono plot
offset <- app_util_est$up_time[1]
action_absolute_start <- (as.numeric(action_absolute_start) - offset)/1000
action_absolute_end   <- (as.numeric(action_absolute_end) - offset)/1000
action_Nabsolute_end <- (as.numeric(action_absolute_start) + (as.numeric(total_time_local)/1000))
#print(paste("action_absolute_start:", action_absolute_start, sep=" "))
if(file.exists(action_file)) {
load(action_file)
prev_id <- rbind(prev_id, prev_id_local)
next_id <- rbind(next_id, next_id_local)
action_label <- rbind(action_label, action_label_local)
section_energy <- rbind(section_energy, section_energy_local)
total_energy <- rbind(total_energy, total_energy_local)
section_time <- rbind(section_time, section_time_local)
total_time <- rbind(total_time, total_time_local)
log_name <- rbind(log_name, targeted_log)
# BAB action chronological ordering
total_action_start <- rbind(total_action_start, action_absolute_start)
#total_action_end <- rbind(total_action_end, action_absolute_end)
total_action_end <- rbind(total_action_end, action_Nabsolute_end)
} else {
action_id <- action_id_local
action_hash <- action_hash_local
prev_id <- prev_id_local
next_id <- next_id_local
action_label <- action_label_local
section_energy <- section_energy_local
total_energy <- total_energy_local
section_time <- section_time_local
total_time <- total_time_local
log_name <- targeted_log
# BAB action chronological ordering
total_action_start <- action_absolute_start
#total_action_end <- action_absolute_end
total_action_end <- total_action_start + (total_time/1000)
}
rownames(prev_id) <- NULL
rownames(next_id) <- NULL
rownames(action_label) <- NULL
rownames(section_energy) <- NULL
rownames(total_energy) <- NULL
rownames(section_time) <- NULL
rownames(total_time) <- NULL
rownames(log_name) <- NULL
# BAB added for chrono plot
rownames(total_action_start) <- NULL
rownames(total_action_end) <- NULL
save(action_id, action_hash, prev_id, next_id, action_label,
section_energy, total_energy, section_time, total_time,
log_name, total_action_start, total_action_end, file=action_file)
## for per app action record
## c(action_id, action_hash, action_label, total_energy, section energy sequence (# of items >= 1))
app_action_id <<- c(app_action_id, action_id_local)
app_action_hash <<- c(app_action_hash, action_hash_local)
app_action_label <<- c(app_action_label, action_label_local)
app_total_energy <<- c(app_total_energy, total_energy_local)
app_section_energy <<- c(app_section_energy, list(section_energy_local))
app_section_time <<- c(app_section_time, list(section_time_local))
app_total_time <<- c(app_total_time, list(total_time_local))
# BAB action chronological ordering
app_action_start <<- c(app_action_start, action_absolute_start)
app_action_end <<- c(app_action_end, action_absolute_end)
}
})
print(paste("app_action_id:", app_action_id, sep=" "))
app_action_energy <- data.frame(cbind(app_action_id, app_action_hash, app_action_label,
app_total_energy, app_section_energy,
app_total_time, app_section_time,
app_action_start, app_action_end))
names(app_action_energy) <- c("action_id", "action_hash", "action_label",
"total_energy", "section_energy",
"total_time", "section_time",
"action_start", "action_end")
View(app_util_est)
View(app_util_raw)
app_util_est <- data.frame(up_time=app_util_raw$up_time,
time_base=app_util_raw$up_time_diff,
display_use=app_util_raw$display_use)
View(app_util_est)
## Check if it's 500ms between records, remove any larger than 20% off
app_util_est <- app_util_est[which(app_util_est$time_base < 600),]
app_util_raw <- app_util_raw[which(app_util_raw$up_time_diff < 600),]
app_util_est <- app_util_est[which(app_util_est$time_base > 400),]
app_util_raw <- app_util_raw[which(app_util_raw$up_time_diff > 400),]
View(app_util_est)
app_util_est$cpu <- 0
app_util_est$cpuidle <- 0
app_util_est$display <- 0
app_util_est$wifi <- 0
app_util_est$wifi_base <- 0
View(app_util_est)
# Moving average approach
app_util_est$wifi <- mavg(app_util_raw$wifi, interval)
app_util_est$wifi <- ((app_util_est$wifi)/(mavg(app_util_raw$time_base)))
app_util_est$cpu <- mavg(app_util_raw$cpu, interval)
app_util_est$cpu <- ((app_util_est$cpu)/(mavg(app_util_raw$time_base)))
#est_matrix_wifit$cpu_base <- mavg(est_matrix$cpu_base, interval)
#est_matrix_wifit$cpu_base <- ((est_matrix_wifit$cpu_base)/(mavg(est_matrix$time_base)))
#app_util_est$mws <- mavg(app_util_raw$mws, interval)
#app_util_est$mws <- ((app_util_est$mws)/(mavg(app_util_raw$time_base)))
app_util_est$display <- mavg(app_util_raw$display, interval)
app_util_est$display <- ((app_util_est$display)/(mavg(app_util_raw$time_base)))
View(app_util_raw)
app_util_est$wifi <- mavg(app_util_raw$wifi_total_diff, interval)
app_util_est$wifi <- ((app_util_est$wifi)/(mavg(app_util_raw$time_base)))
# Moving average approach
app_util_est$cpu <- mavg(app_util_raw$cpu_factor, interval)
app_util_est$cpu <- ((app_util_est$cpu)/(mavg(app_util_raw$time_base)))
app_util_est$cpuidle <- mavg(app_util_raw$cpu_idle_factor, interval)
app_util_est$cpuidle <- (app_util_est$cpuidle)/(mavg(app_util_raw$time_base)))
#est_matrix_wifit$cpu_base <- mavg(est_matrix$cpu_base, interval)
#est_matrix_wifit$cpu_base <- ((est_matrix_wifit$cpu_base)/(mavg(est_matrix$time_base)))
#app_util_est$mws <- mavg(app_util_raw$mws, interval)
#app_util_est$mws <- ((app_util_est$mws)/(mavg(app_util_raw$time_base)))
app_util_est$display <- mavg(app_util_raw$display_factor, interval)
app_util_est$display <- ((app_util_est$display)/(mavg(app_util_raw$time_base)))
app_util_est$wifi <- mavg(app_util_raw$wifi_total_diff, interval)
app_util_est$wifi <- ((app_util_est$wifi)/(mavg(app_util_raw$time_base)))
app_util_est$wifi_base <- mavg(app_util_raw$wifi_base, interval)
app_util_est$wifi_base <- ((app_util_est$wifi_base)/(mavg(app_util_raw$time_base)))
app_util_est$cpuidle <- mavg(app_util_raw$cpu_idle_factor, interval)
app_util_est$cpuidle <- ((app_util_est$cpuidle)/(mavg(app_util_raw$time_base)))
app_util_est$cpuidle <- mavg(app_util_raw$cpu_idle_factor, interval)
View(app_util_est)
app_util_est$cpu <- mavg(app_util_raw$cpu_factor, interval)
app_util_est$cpu <- ((app_util_est$cpu)/(mavg(app_util_raw$time_base)))
# Moving average approach
app_util_est$cpu <- mavg(app_util_raw$cpu_factor, interval)
app_util_est$cpu <- ((app_util_est$cpu)/(mavg(app_util_raw$up_time_diff)))
app_util_est$cpuidle <- mavg(app_util_raw$cpu_idle_factor, interval)
app_util_est$cpuidle <- ((app_util_est$cpuidle)/(mavg(app_util_raw$up_time_diff)))
app_util_est$display <- mavg(app_util_raw$display_factor, interval)
app_util_est$display <- ((app_util_est$display)/(mavg(app_util_raw$up_time_diff)))
app_util_est$wifi <- mavg(app_util_raw$wifi_total_diff, interval)
app_util_est$wifi <- ((app_util_est$wifi)/(mavg(app_util_raw$up_time_diff)))
app_util_est$wifi_base <- mavg(app_util_raw$wifi_base, interval)
app_util_est$wifi_base <- ((app_util_est$wifi_base)/(mavg(app_util_raw$up_time_diff)))
View(app_util_est)
load("/home/beitman/Projects/MobEBug/OrigMobEBug/project_code/power_model/power_model_data/TEST/coefMAV20ss_wifi.Rdata")
View(coef)
